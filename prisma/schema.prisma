// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  bio            String?
  age            Int?         // ← make sure this is here
  location       String?      // ← and this
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts       Account[]
  listings       Listing[]
  reservations   Reservation[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields:[userId], references:[id], onDelete:Cascade)

  @@unique([provider, providerAccountId])
}

enum TournamentType {
  ROUND_ROBIN
  SINGLE_ELIMINATION
}

model Listing {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  imageSrc       String
  createdAt      DateTime   @default(now())
  category       String
  guestCount     Int
  locationValue  String
  localAddress   String
  userId         String     @db.ObjectId
  price          Int
  tournamentDate DateTime   // updated type

  tournamentType TournamentType


  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations   Reservation[]

  matches Match[] //for matches
}


model Reservation {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  listingId       String   @db.ObjectId
  startDate       DateTime
  endDate         DateTime
  totalPrice      Int
  createdAt       DateTime @default(now())

  // New Fields for Team Details
  teamName        String
  teamRepName     String
  teamRepRole     String
  contactNumber   String
  emailAddress    String

  fullName        String    

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing         Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Match {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teamA     String
  teamB     String
  result    String   // e.g., "DRAW", "teamA", "teamB"
  listingId String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}